name: CI
runs-name: "${{ github.actor }} - ${{ github.run_id }}"

on:
  workflow_dispatch:
  input:
    environment:
      type: environment
      description: 'Environment to run the workflow'
      required: true
      default: 'development'
    git-leaks:
      type: boolean
      description: 'Run GitLeaks'
      required: false
      default: true
    sonar-qube:
      type: boolean
      description: 'Run SonarQube'
      required: false
      default: true
    unit-tests:
      type: boolean
      description: 'Run Unit Tests'
      required: false
      default: true
    msg-canal-deploy:
      type: string
      description: 'Message to be displayed in the summary'
      required: false
      default: 'nada a declarar'
  push:
    branches:
      - main
    paths-ignore:
      - '.gitignore'
      - 'docker/.env'
      - '*.md'
      - 'LICENSE'
      - 'CODEOWNERS'
  pull_request:
    branches:
      - main
    types:
      - opened
      - synchronize
      - reopened

env:
  dotnetVersion: 9.x
  csprojFolder: ./src/PoC.KeyCloak.API/PoC.KeyCloak.API.csproj

jobs:
  build:
    environment: ${{ github.event.inputs.environment }}
    runs-on: ubuntu-latest
    steps:

      - name: Get Environment
        run: echo "Environment ${{ github.event.inputs.environment }}"

      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup .NET version ${{ env.dotnetVersion }}
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.dotnetVersion }}
      
      - uses: gitleaks/gitleaks-action@v2
        if: ${{ github.event.inputs.git-leaks }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}
          GITLEAKS_ENABLE_SUMMARY: true
          GITLEAKS_ENABLE_UPLOAD_ARTIFACT: true
          GITLEAKS_NOTIFY_USER_LIST: '@felipementel'

      - name: Set up JDK 23
        uses: actions/setup-java@v4
        if: ${{ github.event.inputs.sonar-qube }}
        with:
          java-version: 23
          distribution: 'zulu'

      - name: Cache SonarCloud packages
        uses: actions/cache@v4
        if: ${{ github.event.inputs.sonar-qube }}
        with:
          path: ~/sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        if: ${{ github.event.inputs.sonar-qube }}
        uses: actions/cache@v4
        with:
          path: ./.sonar/scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
    
      - name: Install SonarCloud scanner
        if: ${{ github.event.inputs.sonar-qube }} && ${{ steps.cache-sonar-scanner.outputs.cache-hit != 'true' }}
        run: |
          mkdir -p .sonar/scanner
          dotnet tool update dotnet-sonarscanner --tool-path .sonar/scanner

      - name: Install SonarCloud scanner
        if: ${{ github.event.inputs.sonar-qube }}
        run: |
          dotnet tool install --global dotnet-sonarscanner

      - name: Install Coverage
        if: ${{ github.event.inputs.unit-tests }}
        run: |
          dotnet tool install --global dotnet-coverage
          dotnet tool install --global dotnet-reportgenerator-globaltool
        
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          dotnet-sonarscanner begin /k:"$ {{ secrets.SONAR_PROJECT_KEY }}" /o:"${{ secrets.SONAR_ORGANIZATION }}" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.cs.vscoveragexml.reportsPaths=coverage.xml /d:sonar.exclusions="**/Migrations/**"
          dotnet restore ${{ env.csprojFolder }}
          dotnet build ${{ env.csprojFolder }} --no-incremental
          dotnet-coverage collect 'dotnet test ./src/' -f xml  -o 'coverage.xml'
          dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"

    - name: Write to workflow job summary
      run: |
        SUMMARY=$'
        # Titulo do summary\n
        ## sub titulo\n
        Mensagem: ${{ github.event.inputs.msg-canal-deploy }}\n'
        echo "$SUMMARY" >> $GITHUB_STEP_SUMMARY

  publish:
    needs: build
    runs-on: ubuntu-latest
    steps:

      - name: Write to workflow job summary
        run: |
          SUMMARY=$'
          # Publicado\n
          ## sub titulo da publicação\n
          Mensagem: ${{ github.event.inputs.msg-canal-deploy }}\n'
          echo "$SUMMARY" >> $GITHUB_STEP_SUMMARY
