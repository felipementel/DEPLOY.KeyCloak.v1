name: CI
run-name: "${{ github.actor }} - ${{ github.run_id }}"

on:
  pull_request:
    branches:
      - main
    types:
      closed
    paths-ignore:
      - '**.md'
      - '.github/**'
  # workflow_call:
  workflow_dispatch:
    inputs:
      environment:
        type: environment
        description: 'Environment to run the workflow'
        required: true
        default: 'DEV'
      git-leaks:
        type: boolean
        description: 'Run GitLeaks'
        required: false
        default: true
      sonar-qube:
        type: boolean
        description: 'Run SonarQube'
        required: false
        default: true
      unit-tests:
        type: boolean
        description: 'Run Unit Tests'
        required: false
        default: true
      msg-canal-deploy:
        type: string
        description: 'Message to be displayed in the summary'
        required: false
        default: 'nada a declarar'
 
env:
  dotnetVersion: 9.x
  csprojFolder: ./src/PoC.KeyCloak.API/PoC.KeyCloak.API.csproj

jobs:
  build:
    environment: ${{ github.event.inputs.environment }}
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true
    outputs:
      tag-version: ${{ steps.get-version.outputs.tag }}
      now: ${{ steps.get-env.outputs.NOW }}
    runs-on: ubuntu-latest
    timeout-minutes: 4
    steps:

      - name: Get Environment
        id: get-env
        run: |
          echo "::warning::Environment ${{ github.event.inputs.environment }}"
          echo "NOW=$(date +'%Y-%m-%dT%H:%M:%S')" >> $GITHUB_OUTPUT

      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup .NET version ${{ env.dotnetVersion }}
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.dotnetVersion }}
      
      - name: üß± Git Leaks 
        uses: gitleaks/gitleaks-action@v2
        if: ${{ github.event.inputs.git-leaks }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}
          GITLEAKS_ENABLE_SUMMARY: true
          GITLEAKS_ENABLE_UPLOAD_ARTIFACT: true
          GITLEAKS_NOTIFY_USER_LIST: '@felipementel'

      - name: üîê Set up JDK 23 to use with SonarCloud
        if: ${{ github.event.inputs.sonar-qube }}
        uses: actions/setup-java@v4        
        with:
          java-version: 23
          distribution: 'zulu'

      - name: üîê SonarCloud packages cache
        uses: actions/cache@v4
        if: ${{ inputs.sonar-qube }}
        with:
          path: ~/sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: üîê SonarCloud scanner cache
        id: cache-sonar-scanner
        if: ${{ inputs.sonar-qube }}
        uses: actions/cache@v4
        with:
          path: ./.sonar/scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
    
      - name: üîê SonarCloud scanner installer
        if: ${{ github.event.inputs.sonar-qube }} #&& (steps.cache-sonar-scanner.outputs.cache-hit != 'true')
        run: |
          mkdir -p .sonar/scanner
          dotnet tool install --global dotnet-sonarscanner
        # --tool-path .sonar/scanner

      - name: Install Coverage
        if: ${{ inputs.unit-tests }}
        run: |
          dotnet tool install --global dotnet-coverage
          dotnet tool install --global dotnet-reportgenerator-globaltool

      - name: Get-Version from csproj
        id: get-version
        shell: bash
        run: |
          version=$(sed -n 's/.*<Version>\(.*\)<\/Version>.*/\1/p' $csprojFolder)
          echo "tag=$version" >> "$GITHUB_OUTPUT"

      - name: Restore dependencies
        run: dotnet restore ./src/PoC.KeyCloak.sln

      - uses: snyk/actions/setup@master
      
      - uses: actions/setup-go@v1

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/dotnet@master
        continue-on-error: true # To make sure that SARIF upload gets called
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --sarif-file-output=snyk-snyc.sarif
          file: ./src/PoC.KeyCloak.sln
          
      - name: Upload result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: snyk-snyc.sarif

      # - name: Run Snyk to check for vulnerabilities
      #   if: ${{ github.event.inputs.snyc }}
      #   uses: snyk/actions/dotnet@master
      #   continue-on-error: true # To make sure that SARIF upload gets called
      #   env:
      #     SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      #   with:
      #     args: --sarif-file-output=snyk.sarif --all-projects
        
      - name: Upload result to GitHub Code Scanning
        if: ${{ inputs.git-leaks }}
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: snyk.sarif
        
      - name: Build and analyze
        if: ${{ inputs.unit-tests && inputs.sonar-qube }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          dotnet-sonarscanner begin /k:"${{ secrets.SONAR_PROJECT_KEY }}" /o:"${{ vars.SONAR_ORGANIZATION }}" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.cs.vscoveragexml.reportsPaths=coverage.xml /d:sonar.exclusions="**/Migrations/**"
          dotnet restore ${{ env.csprojFolder }}
          dotnet build ${{ env.csprojFolder }} --no-incremental
          dotnet-coverage collect 'dotnet test ./src/' -f xml  -o 'coverage.xml'
          dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"

      - name: Write to workflow job summary
        run: |
          SUMMARY=$GITHUB_STEP_SUMMARY$'
          # Vers√£o gerada\n
          | versao | data | 
          |--|--|
          | ${{ steps.get-version.outputs.tag }} | ${{ steps.get-env.outputs.now }} |  \n
          Mensagem: ${{ github.event.inputs.msg-canal-deploy }}\n'
          echo "$SUMMARY" >> $GITHUB_STEP_SUMMARY

  publish:
    needs: build
    environment: ${{ github.event.inputs.environment }}
    # if: ${{ github.event.pull_request.merged && github.event.pull_request.state == 'closed' }}
    runs-on: ubuntu-latest
    steps:

      - name: Write to workflow job summary DEPLOY
        run: |
          SUMMARY=$'
          # Vers√£o publicada\n
          | versao | data | 
          |--|--|
          | ${{ needs.build.outputs.tag-version }} | ${{ needs.build.outputs.now }} |  \n
          Mensagem: ${{ github.event.inputs.msg-canal-deploy }}\n'
          echo "$SUMMARY" >> $GITHUB_STEP_SUMMARY

